from _io import BufferedReader, TextIOWrapper
from typing import Any, Callable, Iterable, List, Tuple, overload


_AllIter = Iterable[Any | _AllIter]
_StrAllIter = Iterable[str | bytes | _StrAllIter]
_Open = TextIOWrapper | BufferedReader
def split(
    __obj: Iterable[Any],
    *seq: Any,
    func: Callable[[Any, Any], Any] = ...,
) -> List[List[Any]]:...
def flatten(seq: _AllIter) -> tuple:...
def to_file(*files: str | bytes | _StrAllIter) -> tuple[str | bytes]:...
def to_openfiles(*files: str | bytes |_StrAllIter, way: str = "r") -> tuple[_Open]:...
def fill(obj: List[Any], filllens: Iterable[int], tofill: Any = None) -> None:...


class CirculateIter:
    args: tuple
    len: int
    index: int
    @overload
    def __init__(self, *args: Any) -> None:...
    @overload
    def __init__(self, args: (List | Tuple)[Any]) -> None:...
    def __iter__(self) -> Iterable:...
    def next(self) -> Any:...
    __next__ = next
    def __len__(self) -> int:...
    def __int__(self) -> int:...

_tt = Tuple[_tt | Any]
def toTuple(x: Iterable) -> _tt:...